<?php
// If this is the first time this template has been loaded, define some functions
if (!defined('TEMPLATE_FUNCTIONS_LOADED')) {
    define('TEMPLATE_FUNCTIONS_LOADED', true);

    function printAddAliases($unit_definition)
    {
        foreach ($unit_definition['names'] as $index => $unit) {
            if ($index == 0) {
                continue;
            } ?>
        $newUnit->addAlias('<?=$unit?>');
<?php   }
    }

    function printSiPrefixesHandler($unit_definition)
    {
        if ($unit_definition['metric_prefixes']['patterns'] !== []) {?>
        static::addMissingSIPrefixedUnits(
            $newUnit,
            <?=$unit_definition['metric_prefixes']['base_metric_unit_scaling_factor']?>,
            '<?=$unit_definition['metric_prefixes']['patterns'][0]?>',
            [
<?php       foreach ($unit_definition['metric_prefixes']['patterns'] as $index => $pattern) {
                if ($index == 0) {
                    continue;
                } ?>
                '<?=$pattern?>',
<?php       } ?>
            ]
        );
<?php   }
    }

    function printAdditionalUnitFactory($unit_definition)
    {
        if (array_key_exists('conversion_factor', $unit_definition)) { ?>
        $newUnit = UnitOfMeasure::linearUnitFactory('<?=$unit_definition['names'][0]?>', <?=$unit_definition['conversion_factor']?>);
<?php   } else { ?>
        $newUnit = new UnitOfMeasure(
            '<?=$unit_definition['names'][0]?>',
            function ($x) {
                return <?=$unit_definition['from_si_unit_expression']?>;
            },
            function ($x) {
                return <?=$unit_definition['to_si_unit_expression']?>;
            }
        );
<?php   }
    }
}

// ----
// --- Here starts the generated class file template (note that the leading
// --- php tag will be added when the file is written.
// ----
?>
// ============================================================================
// WARNING! - This file and others like it are auto-generated by the build
// script.  Please do not edit it directly.  See the physical_quantities.yml
// file in the project root, and the build tooling in the /build directory.
// ============================================================================

namespace PhpUnitsOfMeasure\PhysicalQuantity;

use PhpUnitsOfMeasure\AbstractPhysicalQuantity;
use PhpUnitsOfMeasure\UnitOfMeasure;
<?php if ($data['has_metric_prefixes']) {?>
use PhpUnitsOfMeasure\HasSIUnitsTrait;
<?php } ?>

class <?=$data['name']?> extends AbstractPhysicalQuantity
{
<?php if ($data['has_metric_prefixes']) {?>
    use HasSIUnitsTrait;

<?php } ?>
    protected static $unitDefinitions;

    protected static function initialize()
    {
        $newUnit = UnitOfMeasure::nativeUnitFactory('<?=$data['si_unit']['names'][0]?>');
<?php printAddAliases($data['si_unit']);?>
        static::addUnit($newUnit);
<?php printSiPrefixesHandler($data['si_unit']);?>

<?php foreach ($data['additional_units'] as $factor) {
    printAdditionalUnitFactory($factor);
    printAddAliases($factor); ?>
        static::addUnit($newUnit);
<?php printSiPrefixesHandler($factor);?>

<?php } ?>
    }
}
